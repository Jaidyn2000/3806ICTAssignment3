
var N = H * W;
var<List> obst_list = new List(obst_array);

var steps = 0;
var<List>visited_list = new List();

var pos = source;
var goal_reached = false;


// Proccesses

ExploreNode() = [pos < H * (W - 1) && obst_list.Contains(pos + W) != true && visited_list.Contains(pos + W) != true] MoveUp() []
 				[pos % (W - 1) != 0 && obst_list.Contains(pos + 1) != true && visited_list.Contains(pos + 1) != true] MoveRight() []
 				[pos % W != 0 && obst_list.Contains(pos - 1) != true && visited_list.Contains(pos - 1) != true] MoveLeft() []
 				[pos >= W && obst_list.Contains(pos - W) != true && visited_list.Contains(pos - W) != true] MoveDown();
 				
			



MoveUp() = [pos!= -1]Up{visited_list.Add(pos); pos = pos + W; steps++;} -> ExploreNode();
MoveRight() = [pos!= -1]Right{visited_list.Add(pos); pos = pos + 1; steps++;} -> ExploreNode();
MoveLeft() = [pos!= -1]Left{visited_list.Add(pos); pos = pos - 1; steps++;} -> ExploreNode();
MoveDown() = [pos!= -1]Down{visited_list.Add(pos); pos = pos - W; steps++;} -> ExploreNode();




// Assertions

#define goalreached (pos == goal);

//#assert ExploreNode reaches goalreached;
#assert ExploreNode reaches goalreached with min(steps);
